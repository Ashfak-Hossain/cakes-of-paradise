generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  roleId                Int
  name                  String?
  phone                 String?                @unique
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  address               String?
  last_purchase_date    DateTime?
  isTwoFactorEnabled    Boolean?               @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?

  accounts    Account[]
  sessions    Session[]
  orders      Order[]
  CustomOrder CustomOrder[]

  role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Supplier {
  supplier_id          Int     @id @default(autoincrement())
  supplier_name        String
  contact_name         String?
  phone                String
  email                String?
  supplied_ingredients Json?
  payment_terms        String?

  ingredients Ingredient[]
  purchases   Purchase[]
}

model Ingredient {
  ingredient_id   Int      @id @default(autoincrement())
  supplier_id     Int?
  ingredient_name String   @unique
  unit_of_measure String
  current_stock   Decimal  @default(0)
  reorder_level   Decimal?

  productIngredients ProductIngredient[]
  inventoryLogs      InventoryLog[]
  purchases          Purchase[]
  supplier           Supplier?           @relation(fields: [supplier_id], references: [supplier_id])
}

model Product {
  product_id    Int       @id @default(autoincrement())
  product_name  String
  category_id   Int
  description   String?
  price         Decimal
  cost_to_make  Decimal
  current_stock Int       @default(0)
  is_available  Boolean   @default(false)
  created_at    DateTime  @default(now())
  deletedAt     DateTime?

  Picture            Picture[]
  orderDetails       OrderDetail[]
  ProductionLog      ProductionLog[]
  productIngredients ProductIngredient[]
  category           Category            @relation(fields: [category_id], references: [category_id])

  @@index([category_id])
}

model ProductionLog {
  production_log_id Int      @id @default(autoincrement())
  product_id        Int
  quantity          Int
  production_date   DateTime @default(now())

  product Product @relation(fields: [product_id], references: [product_id])
}

model Category {
  category_id   Int       @id @default(autoincrement())
  category_name String    @unique
  products      Product[]
}

model ProductIngredient {
  product_id    Int
  ingredient_id Int
  quantity      Decimal

  product    Product    @relation(fields: [product_id], references: [product_id])
  ingredient Ingredient @relation(fields: [ingredient_id], references: [ingredient_id])

  @@id([product_id, ingredient_id])
}

model Order {
  order_id       Int           @id @default(autoincrement())
  userId         String
  order_date     DateTime      @default(now())
  total_amount   Decimal
  payment_method PaymentMethod
  status         Status        @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderDetails OrderDetail[]
}

enum PaymentMethod {
  CASH
  CARD
  BKASH
  NAGAD
  ROCKET
  BANK_TRANSFER
}

model OrderDetail {
  order_detail_id Int     @id @default(autoincrement())
  order_id        Int
  product_id      Int?
  custom_order_id Int?
  quantity        Int
  unit_price      Decimal
  total_price     Decimal

  order       Order?       @relation(fields: [order_id], references: [order_id])
  product     Product?     @relation(fields: [product_id], references: [product_id])
  customOrder CustomOrder? @relation(fields: [custom_order_id], references: [custom_order_id])
}

model CustomOrder {
  custom_order_id  Int       @id @default(autoincrement())
  userId           String?
  occasion         String?
  flavor           String?
  size             String?
  icing            String?
  decorations      String?
  special_requests String?
  delivery_date    DateTime?
  delivery_address String?
  delivery_time    String?
  status           Status    @default(PENDING)
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  price            Decimal?
  notes            String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderDetails OrderDetail[]
  Picture      Picture[]
}

enum Status {
  PENDING
  CONFIRMED
  BAKING
  DELIVERED
  CANCELLED
}

model Picture {
  picture_id      Int          @id @default(autoincrement())
  url             String
  custom_order_id Int?
  product_id      Int?
  customOrder     CustomOrder? @relation(fields: [custom_order_id], references: [custom_order_id])
  product         Product?     @relation(fields: [product_id], references: [product_id])
}

model Purchase {
  purchase_id   Int      @id @default(autoincrement())
  supplier_id   Int?
  ingredient_id Int
  quantity      Decimal
  unit_cost     Decimal
  total_cost    Decimal
  purchase_date DateTime @default(now())

  supplier   Supplier?  @relation(fields: [supplier_id], references: [supplier_id])
  ingredient Ingredient @relation(fields: [ingredient_id], references: [ingredient_id])
}

enum ReferenceType {
  PURCHASE
  ORDER
  ADJUSTMENT
}

model InventoryLog {
  log_id         Int           @id @default(autoincrement())
  ingredient_id  Int
  change_amount  Decimal
  log_date       DateTime      @default(now())
  reference_type ReferenceType
  reference_id   Int?

  ingredient Ingredient @relation(fields: [ingredient_id], references: [ingredient_id])
}
